const fs = require('fs');

module.exports = {
  config: {
    name: "onlyadminbox",
    aliases: ["onlyadbox", "adboxonly", "adminboxonly"],
    version: "1.2",
    author: "NTKhang",
    countDown: 5,
    role: 1,
    shortDescription: {
      vi: "bật/tắt chỉ admin box sử dụng bot",
      en: "turn on/off only admin box can use bot"
    },
    longDescription: {
      vi: "bật/tắt chế độ chỉ quản trị của viên nhóm mới có thể sử dụng bot",
      en: "turn on/off only admin box can use bot"
    },
    category: "box chat",
    guide: {
      vi: "   {pn} [on | off]: bật/tắt chế độ chỉ quản trị viên nhóm mới có thể sử dụng bot"
        + "\n   {pn} noti [on | off]: bật/tắt thông báo khi người dùng không phải là quản trị viên nhóm sử dụng bot",
      en: "   {pn} [on | off]: turn on/off the mode only admin of group can use bot"
        + "\n   {pn} noti [on | off]: turn on/off the notification when user is not admin of group use bot"
    }
  },
  langs: {
    vi: {
      turnedOn: "Đã bật chế độ chỉ quản trị viên nhóm mới có thể sử dụng bot",
      turnedOff: "Đã tắt chế độ chỉ quản trị viên nhóm mới có thể sử dụng bot",
      turnedOnNoti: "Đã bật thông báo khi người dùng không phải là quản trị viên nhóm sử dụng bot",
      turnedOffNoti: "Đã tắt thông báo khi người dùng không phải là quản trị viên nhóm sử dụng bot",
      syntaxError: "Sai cú pháp, chỉ có thể dùng {pn} on hoặc {pn} off"
    },
    en: {
      turnedOn: "Turned on the mode only admin of group can use bot",
      turnedOff: "Turned off the mode only admin of group can use bot",
      turnedOnNoti: "Turned on the notification when user is not admin of group use bot",
      turnedOffNoti: "Turned off the notification when user is not admin of group use bot",
      syntaxError: "Syntax error, only use {pn} on or {pn} off"
    }
  },
  onStart: async function ({ args, message, event, threadsData, getLang }) {
    let isSetNoti = false;
    let value;
    let keySetData = "data.onlyAdminBox";
    let indexGetVal = 0;

    if (args[0] == "noti") {
      isSetNoti = true;
      indexGetVal = 1;
      keySetData = "data.hideNotiMessageOnlyAdminBox";
    }

    if (args[indexGetVal] == "on") {
      value = true;
    } else if (args[indexGetVal] == "off") {
      value = false;
    } else {
      return message.reply(getLang("syntaxError"));
    }

    // Save thread ID, status, and admin UserID in adbox.json
    const adBoxData = {
      threadID: event.threadID,
      status: value ? "on" : "off",
      adminUserID: event.senderID
    };

    // Check if adbox.json file exists, create it if not
    if (!fs.existsSync('adbox.json')) {
      fs.writeFileSync('adbox.json', JSON.stringify({}));
    }

    fs.readFile('adbox.json', 'utf8', (err, data) => {
      if (err) {
        console.error('Error reading adbox.json:', err);
        return;
      }

      let adBoxConfig = {};
      try {
        adBoxConfig = JSON.parse(data);
      } catch (parseError) {
        console.error('Error parsing adbox.json:', parseError);
        return;
      }

      adBoxConfig[event.threadID] = adBoxData;

      fs.writeFile('adbox.json', JSON.stringify(adBoxConfig), 'utf8', (err) => {
        if (err) {
          console.error('Error writing adbox.json:', err);
          return;
        }

        console.log('adbox.json updated successfully.');

        // Update the threadsData
        threadsData.set(event.threadID, isSetNoti ? !value : value, keySetData)
          .then(() => {
            if (isSetNoti) {
              message.reply(value ? getLang("turnedOnNoti") : getLang("turnedOffNoti"));
            } else {
              message.reply(value ? getLang("turnedOn") : getLang("turnedOff"));
            }
          })
          .catch((error) => {
            console.error('Error updating threadsData:', error);
          });
      });
    });
  }
};
